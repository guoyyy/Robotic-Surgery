pneedle = [ -10.7505;
    -206.2838;
    369.8692];
blockCorners =[     0;
    0;
    0;
    0;
    -20;
    -20;
    -20;
    -20;
    -240;
    -180;
    -240;
    -180;
    -240;
    -180;
    -240;
    -180;
    360;
    360;
    340;
    340;
    360;
    360;
    340;
    340];
pentry =[   -10;
    -210;
    340];

pexit =[  -10;
    -210;
    360];




blockCorners = reshape(blockCorners,8,3);








%pneedle_intial is a 1x3 vector giving the initial needle position
%rneedle gives the initial needle vector. NOTE: it is assumed not to change
%pneedle_moving is an nx3 vector that gives the needletip position at all timesteps
%
%note that this makes the crucial assumption that the needle moves only in
%the direction it's pointing

rneedle = pexit-pentry;
rneedle = rneedle/norm(rneedle);
EPSILON = 1e-6;
%%

%the numbered vertices of the block that define the corners of the faces
faces = [2,4,6,8;
    5,6,7,8;
    3,4,7,8;%asdfasdf
    1,2,3,4;
    1,2,5,6;
    1,3,5,7];

ln= 68.6308+65.19+161.86+18.00+14.91; % (26 July 2010)
% global ln1
% global ln2
ln1 = 123.142;
% ln2 = 173.228;
ln2=ln-ln1;

%get a second needle point
pneedle2 = pneedle - ln*rneedle;

intersectionCount = 0;
intersectionPoints = zeros(2,3);

for i=1:6
    %get the coordinates of the face's corners
    faceCorners = blockCorners(faces(i,:),:);
    %split the face into triangles
    planecorners = [1 2 3;4 2 3];
    for j = 1:2
        %get vertices of current triangle
        verts = planecorners(j,:);
        %get coordinates of current triangle's vertices
        v0 = faceCorners(verts(1)',:);
        v1 = faceCorners(verts(2)',:);
        v2 = faceCorners(verts(3)',:);
        
        %get line segment
        P0 = pneedle2';
        D = rneedle;
        
        %carry out Moller & Trumbore's fast ray-triangle intersection algorithm
        edge1 = (v1-v0)';
        edge2 = (v2-v0)';
        
        %pvec = cross(D,edge2);
        pvec = [D(2,:).*edge2(3,:)-D(3,:).*edge2(2,:)
            D(3,:).*edge2(1,:)-D(1,:).*edge2(3,:)
            D(1,:).*edge2(2,:)-D(2,:).*edge2(1,:)];
        
        det = edge1'*pvec; %dot product
        
        %note: i use the non-culling branch of the MT algorithm
        if ~(det > -EPSILON && det < EPSILON)
            
            inv_det = 1/det;
            tvec = (P0-v0)';
            u = tvec'*pvec * inv_det;
            
            if ~(u < 0 || u > 1)
                %qvec = cross(tvec,edge1);
                qvec = [tvec(2,:).*edge1(3,:)-tvec(3,:).*edge1(2,:)
                    tvec(3,:).*edge1(1,:)-tvec(1,:).*edge1(3,:)
                    tvec(1,:).*edge1(2,:)-tvec(2,:).*edge1(1,:)];
                
                v = D' * qvec * inv_det;
                
                if ~(v < 0 || u+v > 1)
                    
                    t = edge2'*qvec * inv_det;
                    if t <= ln
                        % if t > ln, the needle is pointing toward the plane, but is not intersecting it
                        intersectionCount = intersectionCount+1;
                        
                        % get the coordinates of the intersection point
                        intersectionPoints(intersectionCount,:) = (1-u-v) * v0 + u*v1 + v*v2;
                        if intersectionCount > 1
                            break
                        end
                    end
                end
            end
        end
    end
end

if intersectionCount == 1
    intersectionPoints(2,:) = pneedle';
end


%now, for each point along the needle's path, find the distance between it
%and the intersection points

p0 = pneedle;
p1 = intersectionPoints(1,:)';
p2 = intersectionPoints(2,:)';

dmax = norm(pentry-pexit);

d1 = norm(p0 - p1);
d2 = norm(p0 - p2);

depth = norm(p1-p2);

if depth > dmax
    depth=dmax;
end

depth


close all
hold on
grid on

plot3(pneedle(2),pneedle(3),pneedle(1),'ro');
plot3(pneedle(2),pneedle(3),pneedle(1),'rx');
plot3(pneedle2(2),pneedle2(3),pneedle2(1),'bo');
plot3(pneedle2(2),pneedle2(3),pneedle2(1),'bx');

line([pneedle(2) pneedle2(2)],[pneedle(3) pneedle2(3)],[pneedle(1) pneedle2(1)])




line(blockCorners([1 2],2),blockCorners([1 2],3),blockCorners([1 2],1),'Color','b');
line(blockCorners([1 3],2),blockCorners([1 3],3),blockCorners([1 3],1),'Color','b');
line(blockCorners([1 5],2),blockCorners([1 5],3),blockCorners([1 5],1),'Color','b');
line(blockCorners([2 4],2),blockCorners([2 4],3),blockCorners([2 4],1),'Color','b');
line(blockCorners([2 6],2),blockCorners([2 6],3),blockCorners([2 6],1),'Color','b');
line(blockCorners([3 4],2),blockCorners([3 4],3),blockCorners([3 4],1),'Color','b');
line(blockCorners([3 7],2),blockCorners([3 7],3),blockCorners([3 7],1),'Color','b');
line(blockCorners([4 8],2),blockCorners([4 8],3),blockCorners([4 8],1),'Color','b');
line(blockCorners([5 6],2),blockCorners([5 6],3),blockCorners([5 6],1),'Color','b');
line(blockCorners([5 7],2),blockCorners([5 7],3),blockCorners([5 7],1),'Color','b');
line(blockCorners([6 8],2),blockCorners([6 8],3),blockCorners([6 8],1),'Color','b');
line(blockCorners([7 8],2),blockCorners([7 8],3),blockCorners([7 8],1),'Color','b');

%determine if the needletip is inside the polygon defined by the block
%corners

%getting rid of the old function, because it seemed to be causing problems

% EPSILON = 1e-2;
%
% dmax = norm(pexit-pentry);
% rtarget = (pexit-pentry)/dmax;
%
% dNeedleToEntry = norm(pneedle-pentry);
% dNeedleToExit = norm(pneedle-pexit);
%
% %this measures the difference between the entry point and where it "should"
% %be based on the rtarget vector and the current needle position
% pexit2 = pneedle + rtarget*dNeedleToExit;
% deflExit = pexit - pexit2;
%
%
% %if we won't hit the block, exit
% if isempty(pentry) && isempty(pexit)
%     depth = 0;
%     dmax = 0;
% %     if pneedle(3) >= 340
% %         sdafh=1;
% %     end
%
% %if the needle hasn't hit the block yet, quit
% % elseif dNeedleToEntry + dNeedleToExit > dmax + EPSILON
%
% %fudge it for the experiment - this works because we're assuming a block
% %with a face perpindicular to the z axis
% elseif pneedle(3) < pentry(3)
%     depth = 0;
%     if pneedle(3) >= 340
%         sdafh=1;
%     end
%
% % if the needle is off the insertion line, exit
% % NOTE: THIS CAUSES BUGS, so let's make it go away
% % elseif norm(deflExit) > EPSILON
% %     depth = 0;
% %     if pneedle(3) >= 340
% %         sdafh=1;
% %     end
% %
% else
%
%     depth = norm(pentry-pneedle);
%
%
%     if depth > dmax
%         depth = dmax;
%     end
% end