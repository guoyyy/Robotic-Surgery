/*
 * SimpleGLCanvas.javabu
 *
 * Created on 30. Juli 2008, 16:18
 */
package edu.cwru.eecs.ros.api;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.media.opengl.GLJPanel;
import matlabcontrol.*;
import com.sun.opengl.util.Animator;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.media.opengl.GLCanvas;
import javax.media.opengl.GLCapabilities;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.UIManager;
import javax.swing.WindowConstants;

/**
 *
 * @author cylab
 * @author mbien
 */
public class RobotGUI extends JFrame {

    private MatlabProxy m_proxy;
    private double cancelOrAVal;
    private double cancelOrBVal;
    private double cancelInVal;
    Delegator m_delegator;

   static {
        // When using a GLCanvas, we have to set the Popup-Menues to be HeavyWeight,
        // so they display properly on top of the GLCanvas
        JPopupMenu.setDefaultLightWeightPopupEnabled(false);
        System.out.println(System.getProperty("java.library.path"));
    }
    private Animator animator;
    private Renderer render;
    private JFrame frame;
    private GLCanvas canvas1;
    private GLCanvas canvas2;
    private GLCanvas canvas3;
    private GLCanvas canvas4;
    /** Creates new form MainFrame */
    public RobotGUI() {
        initComponents();
        setTitle("SABiR User Interface");

        //  canvas.addGLEventListener(new GLRenderer());
        //  animator = new Animator(canvas);

        //  canvas.setMinimumSize(new Dimension());         
        render = new Renderer();
        robotDisplay.addGLEventListener(render);
        robotDisplay.addMouseListener(render);
        robotDisplay.addMouseMotionListener(render);
        robotDisplay.addKeyListener(render);
        
        animator = new Animator(robotDisplay);
        this.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                // Run this on another thread than the AWT event queue to
                // make sure the call to Animator.stop() completes before
                // exiting
                new Thread(new Runnable() {

                    public void run() {
                        animator.stop();
                        System.exit(0);
                    }
                }).start();
            }
        });
        animator.start();
    }

    @Override
    public void setVisible(boolean show) {
        if (!show) {
            animator.stop();
        }
        super.setVisible(show);
        if (!show) {
            animator.start();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        connect = new JButton();
        initialize = new JButton();
        pause = new JButton();
        stop = new JButton();
        extract = new JButton();
        header = new JLabel();
        messageCenterLabel = new JLabel();
        jScrollPane1 = new JScrollPane();
        messageCenter = new JTextArea();
        decrAngleA = new JButton();
        incrAngleA = new JButton();
        angleA = new JLabel();
        decrAngleB = new JButton();
        incrAngleB = new JButton();
        angleB = new JLabel();
        execOr = new JButton();
        cancelOr = new JButton();
        currentAngleOrALabel = new JLabel();
        currentAngleOrBLabel = new JLabel();
        currentAngleAOr = new JLabel();
        currentAngleBOr = new JLabel();
        depthIncrFull = new JButton();
        depthIncrPart = new JButton();
        depthDecrPart = new JButton();
        depthDecrFull = new JButton();
        depthLabel = new JLabel();
        insert = new JButton();
        insertCancel = new JButton();
        gLCanvas1 = new GLCanvas();
        posVectorLabel = new JLabel();
        dirVectorLabel = new JLabel();
        posX = new JTextField();
        posY = new JTextField();
        posZ = new JTextField();
        dirX = new JTextField();
        dirY = new JTextField();
        dirZ = new JTextField();
        move = new JButton();
        moveHome = new JButton();
        singleInsertion = new JButton();
        reset = new JButton();
        multipleInsertion2 = new JButton();
        collectData = new JButton();
        robotDisplay = new GLCanvas();
        selectPath = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        connect.setText("Connect");
        connect.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                connectActionPerformed(evt);
            }
        });

        initialize.setText("Initialize");
        initialize.setEnabled(false);
        initialize.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                initializeActionPerformed(evt);
            }
        });

        pause.setText("Pause");
        pause.setEnabled(false);
        pause.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                pauseActionPerformed(evt);
            }
        });

        stop.setText("STOP");
        stop.setEnabled(false);
        stop.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });

        extract.setText("Extract");
        extract.setEnabled(false);
        extract.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                extractActionPerformed(evt);
            }
        });

        header.setFont(new Font("Tahoma", 1, 24));
        header.setText("ROBO-BIOPSY CONTROL");

        messageCenterLabel.setFont(new Font("Tahoma", 1, 14));
        messageCenterLabel.setText("Message Center:");

        messageCenter.setColumns(20);
        messageCenter.setRows(5);
        jScrollPane1.setViewportView(messageCenter);

        decrAngleA.setText("¡û ");
        decrAngleA.setEnabled(false);
        decrAngleA.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                decrAngleAActionPerformed(evt);
            }
        });

        incrAngleA.setText("¡ú ");
        incrAngleA.setEnabled(false);
        incrAngleA.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                incrAngleAActionPerformed(evt);
            }
        });

        angleA.setText("---");

        decrAngleB.setText("¡û ");
        decrAngleB.setEnabled(false);
        decrAngleB.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                decrAngleBActionPerformed(evt);
            }
        });

        incrAngleB.setText("¡ú ");
        incrAngleB.setEnabled(false);
        incrAngleB.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                incrAngleBActionPerformed(evt);
            }
        });

        angleB.setText("---");

        execOr.setText("Execute Orientation");
        execOr.setEnabled(false);
        execOr.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                execOrActionPerformed(evt);
            }
        });

        cancelOr.setText("Cancel");
        cancelOr.setEnabled(false);
        cancelOr.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cancelOrActionPerformed(evt);
            }
        });

        currentAngleOrALabel.setText("Current Angular Orientation ¦Á:");

        currentAngleOrBLabel.setText("Current Angular Orientation ¦Â:");

        currentAngleAOr.setText("0.0¡ã");

        currentAngleBOr.setText("0.0¡ã");

        depthIncrFull.setText("¡ý");
        depthIncrFull.setEnabled(false);
        depthIncrFull.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                depthIncrFullActionPerformed(evt);
            }
        });

        depthIncrPart.setText("¡ý");
        depthIncrPart.setEnabled(false);
        depthIncrPart.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                depthIncrPartActionPerformed(evt);
            }
        });

        depthDecrPart.setText("¡ü");
        depthDecrPart.setEnabled(false);
        depthDecrPart.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                depthDecrPartActionPerformed(evt);
            }
        });

        depthDecrFull.setText("¡ü");
        depthDecrFull.setEnabled(false);
        depthDecrFull.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                depthDecrFullActionPerformed(evt);
            }
        });

        depthLabel.setText("---");

        insert.setText("Insert");
        insert.setEnabled(false);
        insert.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                insertActionPerformed(evt);
            }
        });

        insertCancel.setText("Cancel");
        insertCancel.setEnabled(false);
        insertCancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                insertCancelActionPerformed(evt);
            }
        });

        posVectorLabel.setText("Position Vector");

        dirVectorLabel.setText("Direction Vector");

        move.setText("Move");
        move.setEnabled(false);
        move.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                moveActionPerformed(evt);
            }
        });

        moveHome.setEnabled(false);
        moveHome.setLabel("MoveHome");
        moveHome.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                moveHomeActionPerformed(evt);
            }
        });

        singleInsertion.setText("Single Insertion");
        singleInsertion.setActionCommand("Single Insertion");
        singleInsertion.setEnabled(false);
        singleInsertion.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                singleInsertionActionPerformed(evt);
            }
        });

        reset.setText("Reset");
        reset.setEnabled(false);
        reset.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        multipleInsertion2.setText("Multiple Insertion");
        multipleInsertion2.setEnabled(false);
        multipleInsertion2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                multipleInsertion2ActionPerformed(evt);
            }
        });

        collectData.setText("Collect Data");
        collectData.setEnabled(false);
        collectData.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                collectDataActionPerformed(evt);
            }
        });

        selectPath.setText("Select Path");
        selectPath.setEnabled(false);
        selectPath.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                selectPathActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(gLCanvas1, GroupLayout.PREFERRED_SIZE, 168, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(ComponentPlacement.RELATED, 230, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                            .addComponent(reset, GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                                            .addComponent(connect)
                                            .addComponent(pause, GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                                            .addComponent(stop, GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                                            .addComponent(initialize, GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE))
                                        .addGap(27, 27, 27)
                                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                            .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                                            .addComponent(messageCenterLabel))
                                        .addPreferredGap(ComponentPlacement.RELATED)))
                                .addGap(79, 79, 79))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(collectData)
                                .addPreferredGap(ComponentPlacement.RELATED)))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(robotDisplay, GroupLayout.PREFERRED_SIZE, 419, GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(ComponentPlacement.RELATED)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(selectPath)
                        .addPreferredGap(ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addComponent(posVectorLabel)
                            .addComponent(dirVectorLabel))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(Alignment.LEADING, false)
                            .addComponent(posX)
                            .addComponent(dirX, GroupLayout.PREFERRED_SIZE, 48, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(Alignment.LEADING, false)
                            .addComponent(posY)
                            .addComponent(dirY, GroupLayout.PREFERRED_SIZE, 48, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(posZ, GroupLayout.PREFERRED_SIZE, 47, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(ComponentPlacement.UNRELATED)
                                .addComponent(move, GroupLayout.PREFERRED_SIZE, 80, GroupLayout.PREFERRED_SIZE))
                            .addComponent(dirZ, GroupLayout.PREFERRED_SIZE, 46, GroupLayout.PREFERRED_SIZE)))
                    .addComponent(depthDecrFull)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(depthLabel))
                            .addComponent(depthIncrFull))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                            .addComponent(depthDecrPart)
                            .addComponent(depthIncrPart))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(Alignment.LEADING, false)
                            .addComponent(insert, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(insertCancel)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(decrAngleA)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(angleA))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(decrAngleB)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(angleB)))
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(incrAngleA)
                                .addPreferredGap(ComponentPlacement.UNRELATED)
                                .addComponent(currentAngleOrALabel)
                                .addPreferredGap(ComponentPlacement.UNRELATED)
                                .addComponent(currentAngleAOr))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(incrAngleB)
                                .addPreferredGap(ComponentPlacement.UNRELATED)
                                .addComponent(currentAngleOrBLabel)
                                .addPreferredGap(ComponentPlacement.UNRELATED)
                                .addComponent(currentAngleBOr))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(execOr)
                        .addGap(45, 45, 45)
                        .addComponent(cancelOr))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(extract, GroupLayout.PREFERRED_SIZE, 118, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(ComponentPlacement.UNRELATED)
                        .addComponent(moveHome, GroupLayout.PREFERRED_SIZE, 119, GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(singleInsertion)
                        .addGap(18, 18, 18)
                        .addComponent(multipleInsertion2)))
                .addGap(20, 20, 20))
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(272, Short.MAX_VALUE)
                .addComponent(header, GroupLayout.PREFERRED_SIZE, 313, GroupLayout.PREFERRED_SIZE)
                .addGap(355, 355, 355))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(header)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(connect)
                    .addComponent(messageCenterLabel))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(initialize)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(pause)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(stop)
                                .addPreferredGap(ComponentPlacement.UNRELATED)
                                .addComponent(reset))
                            .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(collectData))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                            .addComponent(posVectorLabel)
                            .addComponent(posX, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(posY, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(posZ, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(move))
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                            .addComponent(dirVectorLabel)
                            .addComponent(dirX, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(dirY, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(dirZ, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                            .addComponent(extract)
                            .addComponent(moveHome))
                        .addPreferredGap(ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                            .addComponent(singleInsertion)
                            .addComponent(multipleInsertion2))
                        .addGap(12, 12, 12)))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(gLCanvas1, GroupLayout.PREFERRED_SIZE, 0, GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(selectPath)
                        .addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(robotDisplay, GroupLayout.PREFERRED_SIZE, 169, GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                            .addComponent(decrAngleA)
                            .addComponent(incrAngleA)
                            .addComponent(angleA)
                            .addComponent(currentAngleOrALabel)
                            .addComponent(currentAngleAOr))
                        .addPreferredGap(ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                                .addComponent(decrAngleB)
                                .addComponent(angleB)
                                .addComponent(incrAngleB))
                            .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                                .addComponent(currentAngleOrBLabel)
                                .addComponent(currentAngleBOr)))
                        .addPreferredGap(ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                            .addComponent(execOr)
                            .addComponent(cancelOr))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(depthDecrFull)
                                .addGap(87, 87, 87))
                            .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(54, 54, 54)
                                    .addComponent(depthLabel)
                                    .addGap(18, 18, 18)
                                    .addComponent(depthIncrFull))
                                .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(29, 29, 29)
                                    .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                                        .addComponent(insert)
                                        .addComponent(depthDecrPart))
                                    .addPreferredGap(ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                                        .addComponent(insertCancel)
                                        .addComponent(depthIncrPart))
                                    .addGap(29, 29, 29))))))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectActionPerformed(ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed
        initialize.setEnabled(true);

        try {
            MatlabProxyFactoryOptions options = new MatlabProxyFactoryOptions.Builder().setUsePreviouslyControlledSession(true).build();
            matlabcontrol.MatlabProxyFactory factory = new matlabcontrol.MatlabProxyFactory(options);
            this.m_proxy = factory.getProxy();
            String m_cwd = new File("./simulator/").getAbsolutePath();
            cmdCD(m_cwd);
        } catch (MatlabConnectionException ex) {
            Logger.getLogger(RobotGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MatlabInvocationException e) {
            System.err.println("Initialize robot or change to cwd failed!");
            e.printStackTrace();
        }

        m_delegator = new Delegator();
        m_delegator.GuiRegister(this);
        connect.setEnabled(false);
    }//GEN-LAST:event_connectActionPerformed

    private void initializeActionPerformed(ActionEvent evt) {//GEN-FIRST:event_initializeActionPerformed
        angleA.setText("0.0¡ã");
        angleB.setText("0.0¡ã");
        currentAngleAOr.setText("0.0¡ã");
        incrAngleA.setEnabled(true);
        decrAngleA.setEnabled(true);
        depthIncrFull.setEnabled(true);
        depthDecrFull.setEnabled(true);
        depthIncrPart.setEnabled(true);
        depthDecrPart.setEnabled(true);
        depthLabel.setText("0.0");
        insert.setEnabled(true);
        insertCancel.setEnabled(true);
        incrAngleB.setEnabled(true);
        decrAngleB.setEnabled(true);
        pause.setEnabled(true);
        stop.setEnabled(true);
        extract.setEnabled(true);
        move.setEnabled(true);
        execOr.setEnabled(true);
        cancelOr.setEnabled(true);
        moveHome.setEnabled(true);
        singleInsertion.setEnabled(true);
        reset.setEnabled(true);
        multipleInsertion2.setEnabled(true);
        selectPath.setEnabled(true);
        cancelOrAVal = 0;
        cancelOrBVal = 0;
        try {
            if (m_proxy == null) {
                System.out.println("Warning proxy is null");
            }
            m_delegator.proxyRegister(m_proxy);
            m_delegator.handleInitialization();
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(RobotGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_initializeActionPerformed

    private void pauseActionPerformed(ActionEvent evt) {//GEN-FIRST:event_pauseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pauseActionPerformed

    private void stopActionPerformed(ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stopActionPerformed

    private void extractActionPerformed(ActionEvent evt) {//GEN-FIRST:event_extractActionPerformed
        // TODO add your handling code here:
        m_delegator.handleExtraction();
    }//GEN-LAST:event_extractActionPerformed

    private void decrAngleAActionPerformed(ActionEvent evt) {//GEN-FIRST:event_decrAngleAActionPerformed
        // TODO add your handling code here:
        String s = angleA.getText();
        s = s.substring(0, s.length() - 1);
        double d = Double.parseDouble(s);
        d--;
        render.setAngles(0, d);
        angleA.setText(d + "¡ã");
    }//GEN-LAST:event_decrAngleAActionPerformed

    private void incrAngleAActionPerformed(ActionEvent evt) {//GEN-FIRST:event_incrAngleAActionPerformed
        // TODO add your handling code here:
        String s = angleA.getText();
        s = s.substring(0, s.length() - 1);
        double d = Double.parseDouble(s);
        d++;
        render.setAngles(0, d);
        angleA.setText(d + "¡ã");
    }//GEN-LAST:event_incrAngleAActionPerformed

    private void decrAngleBActionPerformed(ActionEvent evt) {//GEN-FIRST:event_decrAngleBActionPerformed
        String s = angleB.getText();
        s = s.substring(0, s.length() - 1);
        double d = Double.parseDouble(s);
        d--;
        render.setAngles(1, d);
        angleB.setText(d + "¡ã");
    }//GEN-LAST:event_decrAngleBActionPerformed

    private void incrAngleBActionPerformed(ActionEvent evt) {//GEN-FIRST:event_incrAngleBActionPerformed

        String s = angleB.getText();
        s = s.substring(0, s.length() - 1);
        double d = Double.parseDouble(s);
        d++;
        render.setAngles(1, d);
        angleB.setText(d + "¡ã");
    }//GEN-LAST:event_incrAngleBActionPerformed

    private void execOrActionPerformed(ActionEvent evt) {//GEN-FIRST:event_execOrActionPerformed
        String s1 = angleB.getText();
        s1 = s1.substring(0, s1.length() - 1);
        double d = Double.parseDouble(s1);
        String s2 = currentAngleBOr.getText().substring(0, currentAngleBOr.getText().length() - 1);
        cancelOrBVal = d + Double.parseDouble(s2);
        currentAngleBOr.setText(Double.toString(cancelOrBVal) + "¡ã");

        s1 = angleA.getText();
        s1 = s1.substring(0, s1.length() - 1);
        d = Double.parseDouble(s1);
        s2 = currentAngleAOr.getText().substring(0, currentAngleAOr.getText().length() - 1);
        cancelOrAVal = d + Double.parseDouble(s2);
        currentAngleAOr.setText(Double.toString(cancelOrAVal) + "¡ã");

        angleA.setText("0.0¡ã");
        angleB.setText("0.0¡ã");


        m_delegator.changeNeedleDirection(Double.parseDouble(angleA.getText()), Double.parseDouble(angleB.getText()));
    }//GEN-LAST:event_execOrActionPerformed

    private void cancelOrActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cancelOrActionPerformed
        //currentAngleAOr.setText(cancelOrAVal + "¡ã");
        angleA.setText("0.0¡ã");
        //currentAngleBOr.setText(cancelOrBVal + "¡ã");
        angleB.setText("0.0¡ã");
    }//GEN-LAST:event_cancelOrActionPerformed

    private void depthIncrFullActionPerformed(ActionEvent evt) {//GEN-FIRST:event_depthIncrFullActionPerformed
        // TODO add your handling code here:
        String s = depthLabel.getText();
        //s = s.substring(0, s.length() - 1);
        double d = Double.parseDouble(s);
        d = Math.round((d + 1) * 10);
        d = d / 10.0;
        depthLabel.setText(Double.toString(d));
    }//GEN-LAST:event_depthIncrFullActionPerformed

    private void depthIncrPartActionPerformed(ActionEvent evt) {//GEN-FIRST:event_depthIncrPartActionPerformed
        // TODO add your handling code here:
        String s = depthLabel.getText();
        // s = s.substring(0, s.length() - 1);
        double d = Double.parseDouble(s);
        d = Math.round((d + 0.1) * 10);
        d = d / 10.0;
        depthLabel.setText(Double.toString(d));
    }//GEN-LAST:event_depthIncrPartActionPerformed

    private void depthDecrPartActionPerformed(ActionEvent evt) {//GEN-FIRST:event_depthDecrPartActionPerformed
        // TODO add your handling code here:
        String s = depthLabel.getText();
        // s = s.substring(0, s.length() - 1);
        double d = Double.parseDouble(s);
        d = Math.round((d - 0.1) * 10);
        d = d / 10.0;
        depthLabel.setText(Double.toString(d));
    }//GEN-LAST:event_depthDecrPartActionPerformed

    private void depthDecrFullActionPerformed(ActionEvent evt) {//GEN-FIRST:event_depthDecrFullActionPerformed
        // TODO add your handling code here:
        String s = depthLabel.getText();
        // s = s.substring(0, s.length() - 1);
        double d = Double.parseDouble(s);
        d = Math.round((d - 1) * 10);
        d = d / 10.0;
        depthLabel.setText(Double.toString(d));
    }//GEN-LAST:event_depthDecrFullActionPerformed

    private void insertActionPerformed(ActionEvent evt) {//GEN-FIRST:event_insertActionPerformed
        // TODO add your handling code here:
        cancelInVal = Double.parseDouble(depthLabel.getText());
        m_delegator.handleInsertion();
    }//GEN-LAST:event_insertActionPerformed

    private void insertCancelActionPerformed(ActionEvent evt) {//GEN-FIRST:event_insertCancelActionPerformed
        // TODO add your handling code here:
        depthLabel.setText(Double.toString(cancelInVal));
    }//GEN-LAST:event_insertCancelActionPerformed

    private void moveActionPerformed(ActionEvent evt) {//GEN-FIRST:event_moveActionPerformed
        m_delegator.handleMoveAction();
    }//GEN-LAST:event_moveActionPerformed

    private void moveHomeActionPerformed(ActionEvent evt) {//GEN-FIRST:event_moveHomeActionPerformed
        // TODO add your handling code here:
        m_delegator.handleMoveHome();
    }//GEN-LAST:event_moveHomeActionPerformed

    private void singleInsertionActionPerformed(ActionEvent evt) {//GEN-FIRST:event_singleInsertionActionPerformed
        // TODO add your handling code here:
        m_delegator.handleSequenceMove();
    }//GEN-LAST:event_singleInsertionActionPerformed

    private void resetActionPerformed(ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        // TODO add your handling code here:
        m_delegator.handleReset();
    }//GEN-LAST:event_resetActionPerformed

    private void multipleInsertion2ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_multipleInsertion2ActionPerformed
        // TODO add your handling code here:
        m_delegator.handleMultipleInsertion();
    }//GEN-LAST:event_multipleInsertion2ActionPerformed

    private void collectDataActionPerformed(ActionEvent evt) {//GEN-FIRST:event_collectDataActionPerformed
        // TODO add your handling code here:
        m_delegator.handleDataCollection();
    }//GEN-LAST:event_collectDataActionPerformed

    private void selectPathActionPerformed(ActionEvent evt) {//GEN-FIRST:event_selectPathActionPerformed
        // TODO add your handling code here:
        frame = new JFrame();
        GridLayout grid = new GridLayout(2, 2);
        frame.setLayout(grid);
        canvas1 = new GLCanvas();
        canvas2 = new GLCanvas();
        canvas3 = new GLCanvas();
        canvas4 = new GLCanvas();
        frame.add(canvas1);
        frame.add(canvas2);
        frame.add(canvas3);
        frame.add(canvas4);
        frame.setSize(640, 480);
        frame.setVisible(true);
    }//GEN-LAST:event_selectPathActionPerformed

    /**
     * Called from within initComponents().
     * hint: to customize the generated code choose 'Customize Code' in the contextmenu
     * of the selected UI Component you wish to cutomize in design mode.
     * @return Returns customized GLCapabilities.
     */
    private GLCapabilities createGLCapabilites() {

        GLCapabilities capabilities = new GLCapabilities();
        capabilities.setHardwareAccelerated(true);

        // try to enable 2x anti aliasing - should be supported on most hardware
        capabilities.setNumSamples(2);
        capabilities.setSampleBuffers(true);

        return capabilities;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // Run this in the AWT event thread to prevent deadlocks and race conditions
        EventQueue.invokeLater(new Runnable() {

            public void run() {

                // switch to system l&f for native font rendering etc.
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (Exception ex) {
                    Logger.getLogger(getClass().getName()).log(Level.INFO, "can not enable system look and feel", ex);
                }

                RobotGUI frame = new RobotGUI();
                frame.setVisible(true);
            }
        });
    }

    private void cmdCD(String path) throws MatlabInvocationException {
        String cmd = "cd(\'" + path + "\')";
        m_proxy.eval(cmd);
    }

    public void sendMessage(String s) {
        messageCenter.setText(s);

    }

    public double getDepth() {
        String s = depthLabel.getText();

        double d = Double.parseDouble(s);
        return d;
    }

    public Point getTagetPosition() {
        Point position = new Point();
        position.x = Double.parseDouble(posX.getText());
        position.y = Double.parseDouble(posY.getText());
        position.z = Double.parseDouble(posZ.getText());
        return position;
    }

    public DirVector getTargetDirection() {
        DirVector direction = new DirVector();
        direction.Rx = Double.parseDouble(dirX.getText());
        direction.Ry = Double.parseDouble(dirY.getText());
        direction.Rz = Double.parseDouble(dirZ.getText());
        return direction;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel angleA;
    private JLabel angleB;
    private JButton cancelOr;
    private JButton collectData;
    private JButton connect;
    private JLabel currentAngleAOr;
    private JLabel currentAngleBOr;
    private JLabel currentAngleOrALabel;
    private JLabel currentAngleOrBLabel;
    private JButton decrAngleA;
    private JButton decrAngleB;
    private JButton depthDecrFull;
    private JButton depthDecrPart;
    private JButton depthIncrFull;
    private JButton depthIncrPart;
    private JLabel depthLabel;
    private JLabel dirVectorLabel;
    private JTextField dirX;
    private JTextField dirY;
    private JTextField dirZ;
    private JButton execOr;
    private JButton extract;
    private GLCanvas gLCanvas1;
    private JLabel header;
    private JButton incrAngleA;
    private JButton incrAngleB;
    private JButton initialize;
    private JButton insert;
    private JButton insertCancel;
    private JScrollPane jScrollPane1;
    private JTextArea messageCenter;
    private JLabel messageCenterLabel;
    private JButton move;
    private JButton moveHome;
    private JButton multipleInsertion2;
    private JButton pause;
    private JLabel posVectorLabel;
    private JTextField posX;
    private JTextField posY;
    private JTextField posZ;
    private JButton reset;
    private GLCanvas robotDisplay;
    private JButton selectPath;
    private JButton singleInsertion;
    private JButton stop;
    // End of variables declaration//GEN-END:variables
}
